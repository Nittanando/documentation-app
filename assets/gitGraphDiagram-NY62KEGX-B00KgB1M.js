import{Cn as e,F as t,I as n,In as r,Jn as i,Nn as a,Pn as o,Rn as s,Sn as c,bn as l,hn as u,k as d,pn as f,qn as p,un as ee,vn as m,wn as h,xn as g}from"./index-D9k0gira.js";import"./chunk-FPAJGGOC-BHevK53p.js";import"./_baseUniq-B2AWcjxs.js";import"./_basePickBy-B35xH3p0.js";import"./clone-DY2Zc6pz.js";import"./chunk-O7ZBX7Z2-HB-yUxl3.js";import"./chunk-S6J4BHB3-CwuINuFu.js";import"./chunk-LBM3YZW2-BbCEwngQ.js";import"./chunk-76Q3JFCE-rqMAYPK3.js";import"./chunk-T53DSG4Q-BQfGN200.js";import"./chunk-LHMN2FUI-pJwPEJy2.js";import"./chunk-FWNWRKHM-8hrESX94.js";import{t as _}from"./chunk-4BX2VUAB-srhTq6bM.js";import{t as te}from"./mermaid-parser.core-BkebYGIm.js";import{t as ne}from"./chunk-QZHKN3VN-BUvqG7aO.js";var v={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},re=m.gitGraph,y=p(()=>d({...re,...c().gitGraph}),`getConfig`),b=new ne(()=>{let e=y(),t=e.mainBranchName,n=e.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:n}]]),branches:new Map([[t,null]]),currBranch:t,direction:`LR`,seq:0,options:{}}});function x(){return t({length:7})}p(x,`getID`);function S(e,t){let n=Object.create(null);return e.reduce((e,r)=>{let i=t(r);return n[i]||(n[i]=!0,e.push(r)),e},[])}p(S,`uniqBy`);var ie=p(function(e){b.records.direction=e},`setDirection`),ae=p(function(e){i.debug(`options str`,e),e=e?.trim(),e||=`{}`;try{b.records.options=JSON.parse(e)}catch(e){i.error(`error while parsing gitGraph options`,e.message)}},`setOptions`),oe=p(function(){return b.records.options},`getOptions`),se=p(function(e){let t=e.msg,n=e.id,r=e.type,a=e.tags;i.info(`commit`,t,n,r,a),i.debug(`Entering commit:`,t,n,r,a);let o=y();n=u.sanitizeText(n,o),t=u.sanitizeText(t,o),a=a?.map(e=>u.sanitizeText(e,o));let s={id:n||b.records.seq+`-`+x(),message:t,seq:b.records.seq++,type:r??v.NORMAL,tags:a??[],parents:b.records.head==null?[]:[b.records.head.id],branch:b.records.currBranch};b.records.head=s,i.info(`main branch`,o.mainBranchName),b.records.commits.has(s.id)&&i.warn(`Commit ID ${s.id} already exists`),b.records.commits.set(s.id,s),b.records.branches.set(b.records.currBranch,s.id),i.debug(`in pushCommit `+s.id)},`commit`),ce=p(function(e){let t=e.name,n=e.order;if(t=u.sanitizeText(t,y()),b.records.branches.has(t))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);b.records.branches.set(t,b.records.head==null?null:b.records.head.id),b.records.branchConfig.set(t,{name:t,order:n}),C(t),i.debug(`in createBranch`)},`branch`),le=p(e=>{let t=e.branch,n=e.id,r=e.type,a=e.tags,o=y();t=u.sanitizeText(t,o),n&&=u.sanitizeText(n,o);let s=b.records.branches.get(b.records.currBranch),c=b.records.branches.get(t),l=s?b.records.commits.get(s):void 0,d=c?b.records.commits.get(c):void 0;if(l&&d&&l.branch===t)throw Error(`Cannot merge branch '${t}' into itself.`);if(b.records.currBranch===t){let e=Error(`Incorrect usage of "merge". Cannot merge a branch to itself`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch abc`]},e}if(l===void 0||!l){let e=Error(`Incorrect usage of "merge". Current branch (${b.records.currBranch})has no commits`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`commit`]},e}if(!b.records.branches.has(t)){let e=Error(`Incorrect usage of "merge". Branch to be merged (`+t+`) does not exist`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},e}if(d===void 0||!d){let e=Error(`Incorrect usage of "merge". Branch to be merged (`+t+`) has no commits`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`"commit"`]},e}if(l===d){let e=Error(`Incorrect usage of "merge". Both branches have same head`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch abc`]},e}if(n&&b.records.commits.has(n)){let e=Error(`Incorrect usage of "merge". Commit with id:`+n+` already exists, use different custom id`);throw e.hash={text:`merge ${t} ${n} ${r} ${a?.join(` `)}`,token:`merge ${t} ${n} ${r} ${a?.join(` `)}`,expected:[`merge ${t} ${n}_UNIQUE ${r} ${a?.join(` `)}`]},e}let f=c||``,p={id:n||`${b.records.seq}-${x()}`,message:`merged branch ${t} into ${b.records.currBranch}`,seq:b.records.seq++,parents:b.records.head==null?[]:[b.records.head.id,f],branch:b.records.currBranch,type:v.MERGE,customType:r,customId:!!n,tags:a??[]};b.records.head=p,b.records.commits.set(p.id,p),b.records.branches.set(b.records.currBranch,p.id),i.debug(b.records.branches),i.debug(`in mergeBranch`)},`merge`),ue=p(function(e){let t=e.id,n=e.targetId,r=e.tags,a=e.parent;i.debug(`Entering cherryPick:`,t,n,r);let o=y();if(t=u.sanitizeText(t,o),n=u.sanitizeText(n,o),r=r?.map(e=>u.sanitizeText(e,o)),a=u.sanitizeText(a,o),!t||!b.records.commits.has(t)){let e=Error(`Incorrect usage of "cherryPick". Source commit id should exist and provided`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let s=b.records.commits.get(t);if(s===void 0||!s)throw Error(`Incorrect usage of "cherryPick". Source commit id should exist and provided`);if(a&&!(Array.isArray(s.parents)&&s.parents.includes(a)))throw Error(`Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.`);let c=s.branch;if(s.type===v.MERGE&&!a)throw Error(`Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.`);if(!n||!b.records.commits.has(n)){if(c===b.records.currBranch){let e=Error(`Incorrect usage of "cherryPick". Source commit is already on current branch`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let e=b.records.branches.get(b.records.currBranch);if(e===void 0||!e){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${b.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let o=b.records.commits.get(e);if(o===void 0||!o){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${b.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let l={id:b.records.seq+`-`+x(),message:`cherry-picked ${s?.message} into ${b.records.currBranch}`,seq:b.records.seq++,parents:b.records.head==null?[]:[b.records.head.id,s.id],branch:b.records.currBranch,type:v.CHERRY_PICK,tags:r?r.filter(Boolean):[`cherry-pick:${s.id}${s.type===v.MERGE?`|parent:${a}`:``}`]};b.records.head=l,b.records.commits.set(l.id,l),b.records.branches.set(b.records.currBranch,l.id),i.debug(b.records.branches),i.debug(`in cherryPick`)}},`cherryPick`),C=p(function(e){if(e=u.sanitizeText(e,y()),b.records.branches.has(e)){b.records.currBranch=e;let t=b.records.branches.get(b.records.currBranch);t===void 0||!t?b.records.head=null:b.records.head=b.records.commits.get(t)??null}else{let t=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}},`checkout`);function w(e,t,n){let r=e.indexOf(t);r===-1?e.push(n):e.splice(r,1,n)}p(w,`upsert`);function T(e){let t=e.reduce((e,t)=>e.seq>t.seq?e:t,e[0]),n=``;e.forEach(function(e){e===t?n+=`	*`:n+=`	|`});let r=[n,t.id,t.seq];for(let e in b.records.branches)b.records.branches.get(e)===t.id&&r.push(e);if(i.debug(r.join(` `)),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){let n=b.records.commits.get(t.parents[0]);w(e,t,n),t.parents[1]&&e.push(b.records.commits.get(t.parents[1]))}else if(t.parents.length==0)return;else if(t.parents[0]){let n=b.records.commits.get(t.parents[0]);w(e,t,n)}e=S(e,e=>e.id),T(e)}p(T,`prettyPrintCommitHistory`);var de=p(function(){i.debug(b.records.commits);let e=E()[0];T([e])},`prettyPrint`),fe=p(function(){b.reset(),f()},`clear`),pe=p(function(){return[...b.records.branchConfig.values()].map((e,t)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}))},`getBranchesAsObjArray`),me=p(function(){return b.records.branches},`getBranches`),he=p(function(){return b.records.commits},`getCommits`),E=p(function(){let e=[...b.records.commits.values()];return e.forEach(function(e){i.debug(e.id)}),e.sort((e,t)=>e.seq-t.seq),e},`getCommitsArray`),D={commitType:v,getConfig:y,setDirection:ie,setOptions:ae,getOptions:oe,commit:se,branch:ce,merge:le,cherryPick:ue,checkout:C,prettyPrint:de,clear:fe,getBranchesAsObjArray:pe,getBranches:me,getCommits:he,getCommitsArray:E,getCurrentBranch:p(function(){return b.records.currBranch},`getCurrentBranch`),getDirection:p(function(){return b.records.direction},`getDirection`),getHead:p(function(){return b.records.head},`getHead`),setAccTitle:o,getAccTitle:g,getAccDescription:l,setAccDescription:a,setDiagramTitle:r,getDiagramTitle:h},O=p((e,t)=>{_(e,t),e.dir&&t.setDirection(e.dir);for(let n of e.statements)k(n,t)},`populate`),k=p((e,t)=>{let n={Commit:p(e=>t.commit(A(e)),`Commit`),Branch:p(e=>t.branch(j(e)),`Branch`),Merge:p(e=>t.merge(M(e)),`Merge`),Checkout:p(e=>t.checkout(N(e)),`Checkout`),CherryPicking:p(e=>t.cherryPick(P(e)),`CherryPicking`)}[e.$type];n?n(e):i.error(`Unknown statement type: ${e.$type}`)},`parseStatement`),A=p(e=>({id:e.id,msg:e.message??``,type:e.type===void 0?v.NORMAL:v[e.type],tags:e.tags??void 0}),`parseCommit`),j=p(e=>({name:e.name,order:e.order??0}),`parseBranch`),M=p(e=>({branch:e.branch,id:e.id??``,type:e.type===void 0?void 0:v[e.type],tags:e.tags??void 0}),`parseMerge`),N=p(e=>e.branch,`parseCheckout`),P=p(e=>({id:e.id,targetId:``,tags:e.tags?.length===0?void 0:e.tags,parent:e.parent}),`parseCherryPicking`),F={parse:p(async e=>{let t=await te(`gitGraph`,e);i.debug(t),O(t,D)},`parse`)},I=e()?.gitGraph,L=10,R=40,z=4,B=2,V=8,H=new Map,U=new Map,W=30,G=new Map,K=[],q=0,J=`LR`,ge=p(()=>{H.clear(),U.clear(),G.clear(),q=0,K=[],J=`LR`},`clear`),Y=p(e=>{let t=document.createElementNS(`http://www.w3.org/2000/svg`,`text`);return(typeof e==`string`?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(e=>{let n=document.createElementNS(`http://www.w3.org/2000/svg`,`tspan`);n.setAttributeNS(`http://www.w3.org/XML/1998/namespace`,`xml:space`,`preserve`),n.setAttribute(`dy`,`1em`),n.setAttribute(`x`,`0`),n.setAttribute(`class`,`row`),n.textContent=e.trim(),t.appendChild(n)}),t},`drawText`),X=p(e=>{let t,n,r;return J===`BT`?(n=p((e,t)=>e<=t,`comparisonFunc`),r=1/0):(n=p((e,t)=>e>=t,`comparisonFunc`),r=0),e.forEach(e=>{let i=J===`TB`||J==`BT`?U.get(e)?.y:U.get(e)?.x;i!==void 0&&n(i,r)&&(t=e,r=i)}),t},`findClosestParent`),_e=p(e=>{let t=``,n=1/0;return e.forEach(e=>{let r=U.get(e).y;r<=n&&(t=e,n=r)}),t||void 0},`findClosestParentBT`),ve=p((e,t,n)=>{let r=n,i=n,a=[];e.forEach(e=>{let n=t.get(e);if(!n)throw Error(`Commit not found for key ${e}`);n.parents.length?(r=be(n),i=Math.max(r,i)):a.push(n),xe(n,r)}),r=i,a.forEach(e=>{Se(e,r,n)}),e.forEach(e=>{let n=t.get(e);if(n?.parents.length){let e=_e(n.parents);r=U.get(e).y-R,r<=i&&(i=r);let t=H.get(n.branch).pos,a=r-L;U.set(n.id,{x:t,y:a})}})},`setParallelBTPos`),ye=p(e=>{let t=X(e.parents.filter(e=>e!==null));if(!t)throw Error(`Closest parent not found for commit ${e.id}`);let n=U.get(t)?.y;if(n===void 0)throw Error(`Closest parent position not found for commit ${e.id}`);return n},`findClosestParentPos`),be=p(e=>ye(e)+R,`calculateCommitPosition`),xe=p((e,t)=>{let n=H.get(e.branch);if(!n)throw Error(`Branch not found for commit ${e.id}`);let r=n.pos,i=t+L;return U.set(e.id,{x:r,y:i}),{x:r,y:i}},`setCommitPosition`),Se=p((e,t,n)=>{let r=H.get(e.branch);if(!r)throw Error(`Branch not found for commit ${e.id}`);let i=t+n,a=r.pos;U.set(e.id,{x:a,y:i})},`setRootPosition`),Ce=p((e,t,n,r,i,a)=>{if(a===v.HIGHLIGHT)e.append(`rect`).attr(`x`,n.x-10).attr(`y`,n.y-10).attr(`width`,20).attr(`height`,20).attr(`class`,`commit ${t.id} commit-highlight${i%V} ${r}-outer`),e.append(`rect`).attr(`x`,n.x-6).attr(`y`,n.y-6).attr(`width`,12).attr(`height`,12).attr(`class`,`commit ${t.id} commit${i%V} ${r}-inner`);else if(a===v.CHERRY_PICK)e.append(`circle`).attr(`cx`,n.x).attr(`cy`,n.y).attr(`r`,10).attr(`class`,`commit ${t.id} ${r}`),e.append(`circle`).attr(`cx`,n.x-3).attr(`cy`,n.y+2).attr(`r`,2.75).attr(`fill`,`#fff`).attr(`class`,`commit ${t.id} ${r}`),e.append(`circle`).attr(`cx`,n.x+3).attr(`cy`,n.y+2).attr(`r`,2.75).attr(`fill`,`#fff`).attr(`class`,`commit ${t.id} ${r}`),e.append(`line`).attr(`x1`,n.x+3).attr(`y1`,n.y+1).attr(`x2`,n.x).attr(`y2`,n.y-5).attr(`stroke`,`#fff`).attr(`class`,`commit ${t.id} ${r}`),e.append(`line`).attr(`x1`,n.x-3).attr(`y1`,n.y+1).attr(`x2`,n.x).attr(`y2`,n.y-5).attr(`stroke`,`#fff`).attr(`class`,`commit ${t.id} ${r}`);else{let o=e.append(`circle`);if(o.attr(`cx`,n.x),o.attr(`cy`,n.y),o.attr(`r`,t.type===v.MERGE?9:10),o.attr(`class`,`commit ${t.id} commit${i%V}`),a===v.MERGE){let a=e.append(`circle`);a.attr(`cx`,n.x),a.attr(`cy`,n.y),a.attr(`r`,6),a.attr(`class`,`commit ${r} ${t.id} commit${i%V}`)}a===v.REVERSE&&e.append(`path`).attr(`d`,`M ${n.x-5},${n.y-5}L${n.x+5},${n.y+5}M${n.x-5},${n.y+5}L${n.x+5},${n.y-5}`).attr(`class`,`commit ${r} ${t.id} commit${i%V}`)}},`drawCommitBullet`),we=p((e,t,n,r)=>{if(t.type!==v.CHERRY_PICK&&(t.customId&&t.type===v.MERGE||t.type!==v.MERGE)&&I?.showCommitLabel){let i=e.append(`g`),a=i.insert(`rect`).attr(`class`,`commit-label-bkg`),o=i.append(`text`).attr(`x`,r).attr(`y`,n.y+25).attr(`class`,`commit-label`).text(t.id),s=o.node()?.getBBox();if(s&&(a.attr(`x`,n.posWithOffset-s.width/2-B).attr(`y`,n.y+13.5).attr(`width`,s.width+2*B).attr(`height`,s.height+2*B),J===`TB`||J===`BT`?(a.attr(`x`,n.x-(s.width+4*z+5)).attr(`y`,n.y-12),o.attr(`x`,n.x-(s.width+4*z)).attr(`y`,n.y+s.height-12)):o.attr(`x`,n.posWithOffset-s.width/2),I.rotateCommitLabel))if(J===`TB`||J===`BT`)o.attr(`transform`,`rotate(-45, `+n.x+`, `+n.y+`)`),a.attr(`transform`,`rotate(-45, `+n.x+`, `+n.y+`)`);else{let e=-7.5-(s.width+10)/25*9.5,t=10+s.width/25*8.5;i.attr(`transform`,`translate(`+e+`, `+t+`) rotate(-45, `+r+`, `+n.y+`)`)}}},`drawCommitLabel`),Te=p((e,t,n,r)=>{if(t.tags.length>0){let i=0,a=0,o=0,s=[];for(let r of t.tags.reverse()){let t=e.insert(`polygon`),c=e.append(`circle`),l=e.append(`text`).attr(`y`,n.y-16-i).attr(`class`,`tag-label`).text(r),u=l.node()?.getBBox();if(!u)throw Error(`Tag bbox not found`);a=Math.max(a,u.width),o=Math.max(o,u.height),l.attr(`x`,n.posWithOffset-u.width/2),s.push({tag:l,hole:c,rect:t,yOffset:i}),i+=20}for(let{tag:e,hole:t,rect:i,yOffset:c}of s){let s=o/2,l=n.y-19.2-c;if(i.attr(`class`,`tag-label-bkg`).attr(`points`,`
      ${r-a/2-z/2},${l+B}  
      ${r-a/2-z/2},${l-B}
      ${n.posWithOffset-a/2-z},${l-s-B}
      ${n.posWithOffset+a/2+z},${l-s-B}
      ${n.posWithOffset+a/2+z},${l+s+B}
      ${n.posWithOffset-a/2-z},${l+s+B}`),t.attr(`cy`,l).attr(`cx`,r-a/2+z/2).attr(`r`,1.5).attr(`class`,`tag-hole`),J===`TB`||J===`BT`){let o=r+c;i.attr(`class`,`tag-label-bkg`).attr(`points`,`
        ${n.x},${o+2}
        ${n.x},${o-2}
        ${n.x+L},${o-s-2}
        ${n.x+L+a+4},${o-s-2}
        ${n.x+L+a+4},${o+s+2}
        ${n.x+L},${o+s+2}`).attr(`transform`,`translate(12,12) rotate(45, `+n.x+`,`+r+`)`),t.attr(`cx`,n.x+z/2).attr(`cy`,o).attr(`transform`,`translate(12,12) rotate(45, `+n.x+`,`+r+`)`),e.attr(`x`,n.x+5).attr(`y`,o+3).attr(`transform`,`translate(14,14) rotate(45, `+n.x+`,`+r+`)`)}}}},`drawCommitTags`),Ee=p(e=>{switch(e.customType??e.type){case v.NORMAL:return`commit-normal`;case v.REVERSE:return`commit-reverse`;case v.HIGHLIGHT:return`commit-highlight`;case v.MERGE:return`commit-merge`;case v.CHERRY_PICK:return`commit-cherry-pick`;default:return`commit-normal`}},`getCommitClassType`),De=p((e,t,n,r)=>{let i={x:0,y:0};if(e.parents.length>0){let n=X(e.parents);if(n){let a=r.get(n)??i;return t===`TB`?a.y+R:t===`BT`?(r.get(e.id)??i).y-R:a.x+R}}else if(t===`TB`)return W;else if(t===`BT`)return(r.get(e.id)??i).y-R;else return 0;return 0},`calculatePosition`),Oe=p((e,t,n)=>{let r=J===`BT`&&n?t:t+L,i=J===`TB`||J===`BT`?r:H.get(e.branch)?.pos,a=J===`TB`||J===`BT`?H.get(e.branch)?.pos:r;if(a===void 0||i===void 0)throw Error(`Position were undefined for commit ${e.id}`);return{x:a,y:i,posWithOffset:r}},`getCommitPosition`),Z=p((e,t,n)=>{if(!I)throw Error(`GitGraph config not found`);let r=e.append(`g`).attr(`class`,`commit-bullets`),i=e.append(`g`).attr(`class`,`commit-labels`),a=J===`TB`||J===`BT`?W:0,o=[...t.keys()],s=I?.parallelCommits??!1,c=p((e,n)=>{let r=t.get(e)?.seq,i=t.get(n)?.seq;return r!==void 0&&i!==void 0?r-i:0},`sortKeys`),l=o.sort(c);J===`BT`&&(s&&ve(l,t,a),l=l.reverse()),l.forEach(e=>{let o=t.get(e);if(!o)throw Error(`Commit not found for key ${e}`);s&&(a=De(o,J,a,U));let c=Oe(o,a,s);if(n){let e=Ee(o),t=o.customType??o.type,n=H.get(o.branch)?.index??0;Ce(r,o,c,e,n,t),we(i,o,c,a),Te(i,o,c,a)}J===`TB`||J===`BT`?U.set(o.id,{x:c.x,y:c.posWithOffset}):U.set(o.id,{x:c.posWithOffset,y:c.y}),a=J===`BT`&&s?a+R:a+R+L,a>q&&(q=a)})},`drawCommits`),Q=p((e,t,n,r,i)=>{let a=(J===`TB`||J===`BT`?n.x<r.x:n.y<r.y)?t.branch:e.branch,o=p(e=>e.branch===a,`isOnBranchToGetCurve`),s=p(n=>n.seq>e.seq&&n.seq<t.seq,`isBetweenCommits`);return[...i.values()].some(e=>s(e)&&o(e))},`shouldRerouteArrow`),$=p((e,t,n=0)=>{let r=e+Math.abs(e-t)/2;if(n>5)return r;if(K.every(e=>Math.abs(e-r)>=10))return K.push(r),r;let i=Math.abs(e-t);return $(e,t-i/5,n+1)},`findLane`),ke=p((e,t,n,r)=>{let i=U.get(t.id),a=U.get(n.id);if(i===void 0||a===void 0)throw Error(`Commit positions not found for commits ${t.id} and ${n.id}`);let o=Q(t,n,i,a,r),s=``,c=``,l=0,u=0,d=H.get(n.branch)?.index;n.type===v.MERGE&&t.id!==n.parents[0]&&(d=H.get(t.branch)?.index);let f;if(o){s=`A 10 10, 0, 0, 0,`,c=`A 10 10, 0, 0, 1,`,l=10,u=10;let e=i.y<a.y?$(i.y,a.y):$(a.y,i.y),n=i.x<a.x?$(i.x,a.x):$(a.x,i.x);J===`TB`?i.x<a.x?f=`M ${i.x} ${i.y} L ${n-l} ${i.y} ${c} ${n} ${i.y+u} L ${n} ${a.y-l} ${s} ${n+u} ${a.y} L ${a.x} ${a.y}`:(d=H.get(t.branch)?.index,f=`M ${i.x} ${i.y} L ${n+l} ${i.y} ${s} ${n} ${i.y+u} L ${n} ${a.y-l} ${c} ${n-u} ${a.y} L ${a.x} ${a.y}`):J===`BT`?i.x<a.x?f=`M ${i.x} ${i.y} L ${n-l} ${i.y} ${s} ${n} ${i.y-u} L ${n} ${a.y+l} ${c} ${n+u} ${a.y} L ${a.x} ${a.y}`:(d=H.get(t.branch)?.index,f=`M ${i.x} ${i.y} L ${n+l} ${i.y} ${c} ${n} ${i.y-u} L ${n} ${a.y+l} ${s} ${n-u} ${a.y} L ${a.x} ${a.y}`):i.y<a.y?f=`M ${i.x} ${i.y} L ${i.x} ${e-l} ${s} ${i.x+u} ${e} L ${a.x-l} ${e} ${c} ${a.x} ${e+u} L ${a.x} ${a.y}`:(d=H.get(t.branch)?.index,f=`M ${i.x} ${i.y} L ${i.x} ${e+l} ${c} ${i.x+u} ${e} L ${a.x-l} ${e} ${s} ${a.x} ${e-u} L ${a.x} ${a.y}`)}else s=`A 20 20, 0, 0, 0,`,c=`A 20 20, 0, 0, 1,`,l=20,u=20,J===`TB`?(i.x<a.x&&(f=n.type===v.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y-l} ${s} ${i.x+u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${c} ${a.x} ${i.y+u} L ${a.x} ${a.y}`),i.x>a.x&&(s=`A 20 20, 0, 0, 0,`,c=`A 20 20, 0, 0, 1,`,l=20,u=20,f=n.type===v.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y-l} ${c} ${i.x-u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x+l} ${i.y} ${s} ${a.x} ${i.y+u} L ${a.x} ${a.y}`),i.x===a.x&&(f=`M ${i.x} ${i.y} L ${a.x} ${a.y}`)):J===`BT`?(i.x<a.x&&(f=n.type===v.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y+l} ${c} ${i.x+u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${s} ${a.x} ${i.y-u} L ${a.x} ${a.y}`),i.x>a.x&&(s=`A 20 20, 0, 0, 0,`,c=`A 20 20, 0, 0, 1,`,l=20,u=20,f=n.type===v.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y+l} ${s} ${i.x-u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${s} ${a.x} ${i.y-u} L ${a.x} ${a.y}`),i.x===a.x&&(f=`M ${i.x} ${i.y} L ${a.x} ${a.y}`)):(i.y<a.y&&(f=n.type===v.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${c} ${a.x} ${i.y+u} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${i.x} ${a.y-l} ${s} ${i.x+u} ${a.y} L ${a.x} ${a.y}`),i.y>a.y&&(f=n.type===v.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${s} ${a.x} ${i.y-u} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${i.x} ${a.y+l} ${c} ${i.x+u} ${a.y} L ${a.x} ${a.y}`),i.y===a.y&&(f=`M ${i.x} ${i.y} L ${a.x} ${a.y}`));if(f===void 0)throw Error(`Line definition not found`);e.append(`path`).attr(`d`,f).attr(`class`,`arrow arrow`+d%V)},`drawArrow`),Ae=p((e,t)=>{let n=e.append(`g`).attr(`class`,`commit-arrows`);[...t.keys()].forEach(e=>{let r=t.get(e);r.parents&&r.parents.length>0&&r.parents.forEach(e=>{ke(n,t.get(e),r,t)})})},`drawArrows`),je=p((e,t)=>{let n=e.append(`g`);t.forEach((e,t)=>{let r=t%V,i=H.get(e.name)?.pos;if(i===void 0)throw Error(`Position not found for branch ${e.name}`);let a=n.append(`line`);a.attr(`x1`,0),a.attr(`y1`,i),a.attr(`x2`,q),a.attr(`y2`,i),a.attr(`class`,`branch branch`+r),J===`TB`?(a.attr(`y1`,W),a.attr(`x1`,i),a.attr(`y2`,q),a.attr(`x2`,i)):J===`BT`&&(a.attr(`y1`,q),a.attr(`x1`,i),a.attr(`y2`,W),a.attr(`x2`,i)),K.push(i);let o=e.name,s=Y(o),c=n.insert(`rect`),l=n.insert(`g`).attr(`class`,`branchLabel`).insert(`g`).attr(`class`,`label branch-label`+r);l.node().appendChild(s);let u=s.getBBox();c.attr(`class`,`branchLabelBkg label`+r).attr(`rx`,4).attr(`ry`,4).attr(`x`,-u.width-4-(I?.rotateCommitLabel===!0?30:0)).attr(`y`,-u.height/2+8).attr(`width`,u.width+18).attr(`height`,u.height+4),l.attr(`transform`,`translate(`+(-u.width-14-(I?.rotateCommitLabel===!0?30:0))+`, `+(i-u.height/2-1)+`)`),J===`TB`?(c.attr(`x`,i-u.width/2-10).attr(`y`,0),l.attr(`transform`,`translate(`+(i-u.width/2-5)+`, 0)`)):J===`BT`?(c.attr(`x`,i-u.width/2-10).attr(`y`,q),l.attr(`transform`,`translate(`+(i-u.width/2-5)+`, `+q+`)`)):c.attr(`transform`,`translate(-19, `+(i-u.height/2)+`)`)})},`drawBranches`),Me=p(function(e,t,n,r,i){return H.set(e,{pos:t,index:n}),t+=50+(i?40:0)+(J===`TB`||J===`BT`?r.width/2:0),t},`setBranchPosition`),Ne={parser:F,db:D,renderer:{draw:p(function(e,t,r,a){if(ge(),i.debug(`in gitgraph renderer`,e+`
`,`id:`,t,r),!I)throw Error(`GitGraph config not found`);let o=I.rotateCommitLabel??!1,c=a.db;G=c.getCommits();let l=c.getBranchesAsObjArray();J=c.getDirection();let u=ee(`[id="${t}"]`),d=0;l.forEach((e,t)=>{let n=Y(e.name),r=u.append(`g`),i=r.insert(`g`).attr(`class`,`branchLabel`),a=i.insert(`g`).attr(`class`,`label branch-label`);a.node()?.appendChild(n);let s=n.getBBox();d=Me(e.name,d,t,s,o),a.remove(),i.remove(),r.remove()}),Z(u,G,!1),I.showBranches&&je(u,l),Ae(u,G),Z(u,G,!0),n.insertTitle(u,`gitTitleText`,I.titleTopMargin??0,c.getDiagramTitle()),s(void 0,u,I.diagramPadding,I.useMaxWidth)},`draw`)},styles:p(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e[`gitBranchLabel`+t]}; }
        .commit${t} { stroke: ${e[`git`+t]}; fill: ${e[`git`+t]}; }
        .commit-highlight${t} { stroke: ${e[`gitInv`+t]}; fill: ${e[`gitInv`+t]}; }
        .label${t}  { fill: ${e[`git`+t]}; }
        .arrow${t} { stroke: ${e[`git`+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,`getStyles`)};export{Ne as diagram};